webservice_http.html

<!DOCTYPE html>
<html lang="en" ng-app="app" ng-controller="ctrl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Registration</title>
    
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
	
</head>

<body>
    <div class="container">
        <h1>Student Registration</h1>
        <form ng-submit="register()" name="registerForm" class="form">
            <label for="name">Name:</label>
            <input type="text" id="name" ng-model="student.name" required>
            <br><br>

            <label for="gender">Gender:</label>
            <select id="gender" ng-model="student.gender" required>
                <option value="" disabled>Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
            <br><br>

            <label for="mail">Email:</label>
            <input type="email" id="mail" ng-model="student.mail" required>
            <br><br>

            <button type="submit" ng-disabled="registerForm.$invalid">Register</button>
        </form>

        <div class="messages">
            <p class="success" ng-if="successMessage">{{ successMessage }}</p>
            <p class="error" ng-if="errorMessage">{{ errorMessage }}</p>
        </div>

        <h2>Registered Students</h2>
        <label for="search">Search by Email Domain:</label>
        <input type="text" id="search" ng-model="emailFilter" placeholder="e.g., gmail.com">
        <br><br>

        <table border="1" class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Gender</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr ng-repeat="student in students | filter:{mail: emailFilter}">
                    <td>{{ student.name }}</td>
                    <td>{{ student.gender | genderPrefix }}</td>
                    <td>{{ student.mail }}</td>
                    <td>
                        <button ng-click="deleteStudent(student._id)">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        const app = angular.module('app', []);

        
        app.filter('genderPrefix', () => {
            return (gender) => {
                if (gender === 'Male') {
                    return 'Mr. ' + gender;
                } else if (gender === 'Female') {
                    return 'Ms. ' + gender;
                }
                return gender;
            };
        });

        app.controller('ctrl', ($scope, $http) => {
            $scope.student = {};
            $scope.successMessage = '';
            $scope.errorMessage = '';
            $scope.students = [];
            $scope.emailFilter = '';

            $scope.register = () => {
                $http.post(`http://localhost:3001/register`, $scope.student)
                    .then((response) => {
                        $scope.successMessage = response.data;
                        $scope.errorMessage = '';
                        $scope.student = {};
                        $scope.getStudents();
                    })
                    .catch((error) => {
                        $scope.successMessage = '';
                        $scope.errorMessage = error.data || 'Error during registration';
                    });
            };

            $scope.getStudents = () => {
                $http.get(`http://localhost:3001/students`)
                    .then((response) => {
                        $scope.students = response.data;
                    })
                    .catch((error) => {
                        $scope.errorMessage = 'Error fetching students';
                    });
            };

            $scope.deleteStudent = (id) => {
                if (confirm('Are you sure you want to delete this student?')) {
                    $http.delete(`http://localhost:3001/students/${id}`)
                        .then((response) => {
                            $scope.successMessage = response.data;
                            $scope.getStudents();
                        })
                        .catch((error) => {
                            $scope.errorMessage = 'Error deleting student';
                        });
                }
            };

            $scope.getStudents();
        });
    </script>
</body>

</html>


server.js

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();


app.use(cors());
app.use(bodyParser.json());
   

mongoose.connect('mongodb://localhost:27017/stud', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'))
    .catch((err) => console.error('MongoDB connection error:', err));


const studentSchema = new mongoose.Schema({
    name: String,
    gender: String,
    mail: String,
});


const Student = mongoose.model('Student', studentSchema);


app.post('/register', async (req, res) => {
    try {
        const { name, gender, mail } = req.body;

        
        if (!name || !gender || !mail) {
            return res.status(400).send('All fields are required');
        }

        const newStudent = new Student({ name, gender, mail });
        await newStudent.save();

        res.send('Registration successful');
    } catch (error) {
        console.error('Error during registration:', error.message);
        res.status(500).send('Server error');
    }
});


app.get('/students', async (req, res) => {
    try {
        const students = await Student.find();
        res.send(students);
    } catch (error) {
        console.error('Error fetching students:', error.message);
        res.status(500).send('Server error');
    }
});


app.delete('/students/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const deletedStudent = await Student.findByIdAndDelete(id);
        
        if (deletedStudent) {
            res.send('Student successfully deleted');
        } else {
            res.status(404).send('Student not found');
        }
    } catch (error) {
        console.error('Error deleting student:', error.message);
        res.status(500).send('Server error');
    }
});


const PORT = 3001;
app.listen(PORT, () => console.log("Server running"));





factory_http.html

<!DOCTYPE html>
<html lang="en" ng-app="app" ng-controller="ctrl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Registration</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>

<body>
    <div class="container">
        <h1>Student Registration</h1>
        <form ng-submit="register()" name="registerForm" class="form">
            <label for="name">Name:</label>
            <input type="text" id="name" ng-model="student.name" required>
            <br><br>

            <label for="gender">Gender:</label>
            <select id="gender" ng-model="student.gender" required>
                <option value="" disabled>Select Gender</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
            </select>
            <br><br>

            <label for="mail">Email:</label>
            <input type="email" id="mail" ng-model="student.mail" required>
            <br><br>

            <button type="submit" ng-disabled="registerForm.$invalid">Register</button>
        </form>

        <div class="messages">
            <p class="success" ng-if="successMessage">{{ successMessage }}</p>
            <p class="error" ng-if="errorMessage">{{ errorMessage }}</p>
        </div>

        <h2>Registered Students</h2>
        <label for="search">Search by Email Domain:</label>
        <input type="text" id="search" ng-model="emailFilter" placeholder="e.g., gmail.com">
        <br><br>

        <table border="1" class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Gender</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr ng-repeat="student in students | filter:{mail: emailFilter}">
                    <td>{{ student.name }}</td>
                    <td>{{ student.gender | genderPrefix }}</td>
                    <td>{{ student.mail }}</td>
                    <td>
                        <button ng-click="deleteStudent(student._id)">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        const app = angular.module('app', []);

        
        app.factory('StudentService', ($http) => {
            const baseUrl = 'http://localhost:3001';
            return {
                register: (student) => $http.post(`${baseUrl}/register`, student),
                getStudents: () => $http.get(`${baseUrl}/students`),
                deleteStudent: (id) => $http.delete(`${baseUrl}/students/${id}`)
            };
        });

        
        app.filter('genderPrefix', () => {
            return (gender) => {
                if (gender === 'Male') {
                    return 'Mr. ' + gender;
                } else if (gender === 'Female') {
                    return 'Ms. ' + gender;
                }
                return gender;
            };
        });

      
        app.controller('ctrl', ($scope, StudentService) => {
            $scope.student = {};
            $scope.successMessage = '';
            $scope.errorMessage = '';
            $scope.students = [];
            $scope.emailFilter = '';

            
            $scope.register = () => {
                StudentService.register($scope.student)
                    .then((response) => {
                        $scope.successMessage = response.data;
                        $scope.errorMessage = '';
                        $scope.student = {}; 
                        $scope.getStudents(); 
                    })
                    .catch((error) => {
                        $scope.successMessage = '';
                        $scope.errorMessage = error.data || 'Error during registration';
                    });
            };

            
            $scope.getStudents = () => {
                StudentService.getStudents()
                    .then((response) => {
                        $scope.students = response.data;
                    })
                    .catch(() => {
                        $scope.errorMessage = 'Error fetching students';
                    });
            };

            
            $scope.deleteStudent = (id) => {
                if (confirm('Are you sure you want to delete this student?')) {
                    StudentService.deleteStudent(id)
                        .then((response) => {
                            $scope.successMessage = response.data;
                            $scope.getStudents(); 
                        })
                        .catch(() => {
                            $scope.errorMessage = 'Error deleting student';
                        });
                }
            };

            
            $scope.getStudents();
        });
    </script>
</body>

</html>


css


body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    margin: 0;
    padding: 20px;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1, h2 {
    text-align: center;
    color: #333;
}

.form label {
    display: inline-block;
    width: 100px;
    font-weight: bold;
}

.form input, .form select, .form button {
    width: calc(100% - 120px);
    padding: 8px;
    margin: 8px 0;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.form button {
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
}

.form button:disabled {
    background-color: #ccc;
}

.messages .success {
    color: green;
}

.messages .error {
    color: red;
}

.table {
    width: 100%;
    margin-top: 20px;
    border-collapse: collapse;
}

.table th, .table td {
    text-align: left;
    padding: 10px;
}

.table th {
    background-color: #f4f4f4;
}

.table td button {
    background-color: #ff4d4d;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 4px;
}


custom service.html

<!DOCTYPE html>
<html lang="en" ng-app="app" ng-controller="ctrl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Registration</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>

<body>
    <h1>Student Registration</h1>
    <form ng-submit="register()" name="registerForm">
        <label for="name">Name:</label>
        <input type="text" id="name" ng-model="student.name" required>
        <br><br>

        <label for="gender">Gender:</label>
        <select id="gender" ng-model="student.gender" required>
            <option value="" disabled>Select Gender</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
        </select>
        <br><br>

        <label for="mail">Email:</label>
        <input type="email" id="mail" ng-model="student.mail" required>
        <br><br>

        <button type="submit" ng-disabled="registerForm.$invalid">Register</button>
    </form>

    <div>
        <p style="color: green;" ng-if="successMessage">{{ successMessage }}</p>
        <p style="color: red;" ng-if="errorMessage">{{ errorMessage }}</p>
    </div>

    <h2>Registered Students</h2>
    <label for="search">Search by Email Domain:</label>
    <input type="text" id="search" ng-model="emailFilter" placeholder="e.g., gmail.com">
    <br><br>
    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>Gender</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="student in students | filter:{mail: emailFilter}">
                <td>{{ student.name }}</td>
                <td>{{ student.gender | genderPrefix }}</td>
                <td>{{ student.mail }}</td>
                <td>
                    <button ng-click="deleteStudent(student._id)">Delete</button>
                </td>
            </tr>
        </tbody>
    </table>

    <script>
        const app = angular.module('app', []);

        app.service('StudentService', function ($http) {
            const baseUrl = 'http://localhost:3001';

            this.register = (student) => $http.post(`${baseUrl}/register`, student);

            this.getStudents = () => $http.get(`${baseUrl}/students`);

            this.deleteStudent = (id) => $http.delete(`${baseUrl}/students/${id}`);
        });

        app.filter('genderPrefix', () => {
            return (gender) => {
                if (gender === 'Male') {
                    return 'Mr. ' + gender;
                } else if (gender === 'Female') {
                    return 'Ms. ' + gender;
                }
                return gender;
            };
        });

        app.controller('ctrl', function ($scope, StudentService) {
            $scope.student = {};
            $scope.successMessage = '';
            $scope.errorMessage = '';
            $scope.students = [];
            $scope.emailFilter = '';

            $scope.register = () => {
                StudentService.register($scope.student)
                    .then((response) => {
                        $scope.successMessage = response.data;
                        $scope.errorMessage = '';
                        $scope.student = {};
                        $scope.getStudents();
                    })
                    .catch((error) => {
                        $scope.successMessage = '';
                        $scope.errorMessage = error.data || 'Error during registration';
                    });
            };

            $scope.getStudents = () => {
                StudentService.getStudents()
                    .then((response) => {
                        $scope.students = response.data;
                    })
                    .catch(() => {
                        $scope.errorMessage = 'Error fetching students';
                    });
            };

            $scope.deleteStudent = (id) => {
                if (confirm('Are you sure you want to delete this student?')) {
                    StudentService.deleteStudent(id)
                        .then((response) => {
                            $scope.successMessage = response.data;
                            $scope.getStudents();
                        })
                        .catch(() => {
                            $scope.errorMessage = 'Error deleting student';
                        });
                }
            };

            $scope.getStudents();
        });
    </script>
</body>

</html>



dom.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>XML to Table</title>
</head>

<body>
    <h1></h1>
    <button onclick="loadAndDisplayXML()">Display XML as Table</button>

    <div id="tableContainer"></div>

    <script>
        const xmlData = `
            <students>
                <student>
                    <name>John Doe</name>
                    <gender>Male</gender>
                    <email>john.doe@example.com</email>
                </student>
                <student>
                    <name>Jane Smith</name>
                    <gender>Female</gender>
                    <email>jane.smith@example.com</email>
                </student>
                <student>
                    <name>Sam Brown</name>
                    <gender>Male</gender>
                    <email>sam.brown@example.com</email>
                </student>
            </students>
        `;

        function loadAndDisplayXML() {
            
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(xmlData, "text/xml");

            
            const students = xmlDoc.getElementsByTagName("student");

           
            let tableHTML = `
                <table border="1">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Gender</th>
                            <th>Email</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            
            for (let i = 0; i < students.length; i++) {
                const name = students[i].getElementsByTagName("name")[0].textContent;
                const gender = students[i].getElementsByTagName("gender")[0].textContent;
                const email = students[i].getElementsByTagName("email")[0].textContent;

                tableHTML += `
                    <tr>
                        <td>${name}</td>
                        <td>${gender}</td>
                        <td>${email}</td>
                    </tr>
                `;
            }

            
            tableHTML += `
                    </tbody>
                </table>
            `;

            
            document.getElementById("tableContainer").innerHTML = tableHTML;
        }
    </script>
</body>

</html>



xml

<?xml version="1.0" encoding="UTF-8"?>
<Students>
    <Student>
        <Name>John Doe</Name>
        <Gender>Male</Gender>
        <Email>john.doe@example.com</Email>
    </Student>
    <Student>
        <Name>Jane Smith</Name>
        <Gender>Female</Gender>
        <Email>jane.smith@example.com</Email>
    </Student>
    <Student>
        <Name>Chris Johnson</Name>
        <Gender>Male</Gender>
        <Email>chris.johnson@example.com</Email>
    </Student>
</Students>




Xquery

Open the BaseX GUI.
Add your students.xml file by clicking File -> Open.
Go to the XQuery tab.
Paste the XQuery script into the editor.
Click Run to execute the query.
The result will be displayed in the output window.

xquery version "3.1";

declare variable $doc := document{"/path/to/students.xml"};

for $student in $doc/Students/Student
return
    <student>
        <name>{ $student/Name }</name>
        <email>{ $student/Email }</email>
    </student>
	
DTD

<!DOCTYPE Students [
  <!ELEMENT Students (Student+)>
  <!ELEMENT Student (Name, Gender, Email)>
  <!ELEMENT Name (#PCDATA)>
  <!ELEMENT Gender (#PCDATA)>
  <!ELEMENT Email (#PCDATA)>
]>




readme.txt

server.js

npm init -y
npm install express mongoose body-parser cors
node ser.js


npm install -g http-server
http-server .
Available on:
  http://192.168.56.1:8080
  http://192.168.247.194:8080
  http://127.0.0.1:8080

